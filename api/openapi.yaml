openapi: "3.0.3"

info:
  title: "Shop Review API Example"
  description: |
    # Features
    - Get reviews
    - Post review
  termsOfService: "https://tastylog.com/terms/"
  contact:
    name: "Customer Support"
    url: "https://tastylog.com/support/"
    email: "support-desk@tastylog.com"
  license:
    name: "MIT Licence"
    url: "https://opensource.org/licenses/MIT"
  version: "1.0.0"

tags:
  - name: reviews
    description: "Shop review operation"

servers:
  - url: "http://localhost:{port}"
    description: "Local development"
    variables:
      port:
        enum: ["3000", "8080"]
        default: "3000"
  - url: "http://it1.tastylog.com"
    description: "Integration Test"
  - url: "https://stg.tastylog.com"
    description: "Staging"
  - url: "https://api.tastylog.com"
    description: "Production"

paths:
  "/shops/{shopId}/reviews":
    get:
      summary: "Get shop reviews"
      tags: ["reviews"]
      parameters:
        - $ref: "#/componenst/parameters/ShopId"
      responses:
        "200":
          description: "Success operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Review"
      security: []
      
    post:
      summary: "Create review"
      tags: ["reviews"]
      parameters:
        - $ref: "#/componenst/parameters/ShopId"
        - name: X-Api-Key
          in: header
          description: "Request user's identifier"
          schema: { type: string }
          example: "XXXX-XXXX-XXXX-XXXX"
        - name: token
          in: cookie
          description: "One time token"
          schema: { type: string }
          example: "XXXX-XXXX-XXXX-XXXX"
      requestBody:
        description: "Contets of review"
        required: true
        content:
          application/json:
            schema: 
              $ref: "#/components/schemas/Review"
      responses:
        "201":
          description: "Success response"
          headers:
            location:
              description: "New URL of created review"
              schema: { type: string, format: url }
        "400":
          $ref: "#/components/responses/400-BadRequest"

security:
  - apikey_auth: []

components:
  schemas:
    Review:
      type: object
      properties:
        score: { type: integer }
        comment: { type: string }
    ClientError:
      type: object
      properties:
        code: { type: string }
        type: { type: string }
        message: { type: string }
        errors:
          type: array
          items:
            type: object
            properties:
              field: { type: string }
              code: { type: string }
    Samplelnt:
      type: integer
      minimum: 0
      exclusiveMinimum: false
      maximum: 100
      exclusiveMaximum: true
    SampleString:
      type: string
      nullable: true
      minLength: 10
      maxLength: 20
    SampleBoolean:
      type: boolean
    SampleObject:
      type: object
      properties:
        shop:
          type: object
          properties:
            name: { type: string }
            place: { type: string }
        reviews:
          type: array
          items:
            properties:
              score:
                type: integer
                enum: [1, 2, 3, 4, 5]
              comment:
                type: string
  parameters:
    ShopId:
      name: shopId
      in: path
      description: "Shop identifier"
      required: true
      schema: { type: string }
  responses:
    400-BadRequest:
      description: "Client side error"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ClientError"
  securitySchemes:
    apikey_auth:
      description: "API Key authorization"
      type: apiKey
      in: header
      name: "X-Api-Key"
